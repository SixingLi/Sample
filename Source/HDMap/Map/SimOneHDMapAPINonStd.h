// ==========================================================================
// Copyright (C) 2018 - 2021 Beijing 51WORLD Digital Twin Technology Co., Ltd. 
// , and/or its licensors.  All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Beijing 51WORLD Digital Twin Technology Co., Ltd. 
// ("51WORLD") and/or its licensors,  which is protected by the People's 
// Republic of China and/or other countries copyright law and by 
// international treaties.
//
// The Data may not be disclosed or distributed to third parties or be
// copied or duplicated, in whole or in part, without the prior written
// consent of 51WORLD.
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following
// disclaimer, must be included in all copies of the Software, in whole
// or in part, and all derivative works of the Software, unless such copies
// or derivative works are solely in the form of machine-executable object
// code generated by a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
// 51WORLD DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
// OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE PRACTICE. IN NO
// EVENT WILL 51WORLD AND/OR ITS LICENSORS BE LIABLE FOR ANY LOST
// REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR
// CONSEQUENTIAL DAMAGES, EVEN IF 51WORLD AND/OR ITS LICENSORS HAS
// BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
// ==========================================================================
#pragma once
#pragma warning(disable:4819)
#pragma warning(disable:4190)
#ifdef BUILD_SIMONE_SM
#if defined(WIN32) || defined(_WIN32)
#define SIMONE_SM_API __declspec(dllexport)
#elif defined(__linux__) || defined(__linux)
#define SIMONE_SM_API 
#endif
#else
#define SIMONE_SM_API
#endif
#ifndef  WITHOUT_HDMAP
#include "SSD/SimPoint3D.h"
#include "SSD/SimString.h"
#include "public/MHDMap.h"
#endif // ! WITH_HDMAP



#ifdef __cplusplus
extern "C"
{
#endif
namespace SimOneAPI {
#ifndef  WITHOUT_HDMAP
	enum EDirectionType_
	{
		Forward = 0,
		TurnLeft = 1,
		TurnRight = 2,
		TurnBack =3,
		ForwardAndTurnLeft = 4,
		ForwardAndTurnRight = 5,
		ForwardAndTurnBack = 6,
		TurnLeftAndTurnBack = 7
	};

	enum ELaneLineType_
	{
		none = 0,
		whiteSolid = 1,
		whiteDotted = 2,
		yellowSolid = 3,
		yellowDotted = 4
	};

	struct LaneIndexInfo_
	{
		int currentIndex = -99;
		SSD::SimVector<int> indexList;
	};

	struct LaneSample_
	{
		int laneCode;  //1, 2, ...
		bool inJunction = false;
		SSD::SimPoint3DVector leftBoundary;    //Left boundary sample data：lane_line_left_data
		SSD::SimPoint3DVector rightBoundary;  //Right boundary sample data：lane_line_right_data
	};

	struct OverlapLaneInfo_
	{
		bool isOverlapLeftBoundary = false;
		bool isOverlapRightBoundary = false;
	};

	struct LaneLineTypeInfo_
	{
		ELaneLineType_ leftLaneLineType;
		ELaneLineType_ rightLaneLineType;
	};

	struct LaneData_
	{
		LaneIndexInfo_ laneIndexInfo;
		EDirectionType_ laneType;
		SSD::SimVector<LaneSample_> laneSampleList;
		OverlapLaneInfo_ overlapLaneInfo;
		LaneLineTypeInfo_ laneLineTypeInfo;
	};

	struct LaneInfo_
	{
		SSD::SimVector<LaneData_> dataList;
	};

	struct TyrePosInfo_
	{
		SSD::SimPoint3D frontLeft;
		SSD::SimPoint3D frontRight;
		SSD::SimPoint3D rearLeft;
		SSD::SimPoint3D rearRight;
	};

	/*!
	获取输入点所在路段的车道和道路相关信息，包括车道编号，地面指示行车箭头，前方100米车道线采样点，是否压线，车道线类型
	\li function:
	*	GetLaneIndexList
	\li brief:
	*	Get current location belonging road section by returning all lanes' code, like 0, 1, 2, ... .
	The reported lanes are on the same side of road section regarding current location. The reversed side lanes should be omitted.
	@param
	*   pos: Input 3d location.
	@param
	*   tyrePosInfo_: Input tyre postion info.
	@param
	*   forward: Input forward distance to detect lane lines.
	@param[out]
	*   currentLaneIndex: Lane code that current location belongs to. Code as this format, 0, 1, 2, ... .
	@param[out]
	*   laneIdList: Belong road section's all lanes' ID list. Each ID is global unique in this map.
	@return
	*	Belong road section's all lanes' code list. Code as this format, 0, 1, 2, ... . Can be empty.
	*/
	SIMONE_SM_API LaneInfo_ GetLaneInfo(const SSD::SimPoint3D& pos, const TyrePosInfo_& tyrePosInfo, const double& forward);

	/*!
	获取输入点所在路段的所有车道编号
	\li function:
	*	GetLaneIndexList
	\li brief:
	*	Get current location belonging road section by returning all lanes' code, like 0, 1, 2, ... .
	The reported lanes are on the same side of road section regarding current location. The reversed side lanes should be omitted.
	@param
	*   pos: Input 3d location.
	@param[out]
	*   currentLaneIndex: Lane code that current location belongs to. Code as this format, 0, 1, 2, ... .
	@param[out]
	*   laneIdList: Belong road section's all lanes' ID list. Each ID is global unique in this map.
	@return
	*	Belong road section's all lanes' code list. Code as this format, 0, 1, 2, ... . Can be empty.
	*/
	SIMONE_SM_API SSD::SimVector<int> GetLaneIndexList(const SSD::SimPoint3D& pos, int& currentLaneIndex, SSD::SimStringVector& laneIdList);

	/*!
	获取行车指示信息
	\li function:
	*	GetIconType
	\li brief:
	*	Get direction icon type of current lane.
	@param
	*   pos: Input 3d location.
	@return
	*	Direction icon type EDirectionType_.
	*/
	SIMONE_SM_API EDirectionType_ GetIconType(const SSD::SimPoint3D& pos);

	/*!
	获取主车位置所在车道信息(包含车道ID，左右边缘线，虚拟中心线)
	\li function:
	*	GetLaneSampleByLocation
	\li brief:
	*	 Get all lane data in the loaded map
	@param
	*   pos: Input 3d location.
	@param[out]
	*   info: Lane information(HDMapStandalone::MLaneInfo) of specified lane.
	@return
	*	True if specified lane exists in the map, else returns false.
	*/
	SIMONE_SM_API bool GetLaneSampleByLocation(const SSD::SimPoint3D& pos, HDMapStandalone::MLaneInfo& info);
#endif
}
#ifdef __cplusplus
}
#endif
